name: Rust Client Release
on:
  workflow_call:
    secrets:
      CRATES_IO_TOKEN:
        required: true
      ACCESS_TOKEN:
        required: true

jobs:
  check-version:
    name: Check Version
    runs-on: ubuntu-22.04

    outputs:
      local-version: ${{ steps.get-local-version.outputs.version }}
      remote-version: ${{ steps.get-remote-version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Local Version
        id: get-local-version
        working-directory: ./client/rust
        run: echo "version=$(grep "^version" Cargo.toml | awk '{print $3}' | tr -d '"')" >> $GITHUB_OUTPUT

      - name: Get Remote Version
        id: get-remote-version
        run: echo "version=$(cargo search mita | grep -m 1 mita | awk '{print $3}' | tr -d '"=')" >> $GITHUB_OUTPUT

  test:
    name: Test
    needs: [ "check-version" ]
    if: needs.check-version.outputs.local-version != needs.check-version.outputs.remote-version
    uses: ./.github/workflows/client-rust-test.yml

  build:
    name: Build ${{ matrix.target }}
    needs: [ test ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            use_cross: false
          - target: x86_64-pc-windows-gnu
            os: ubuntu-22.04
            use_cross: true
          - target: x86_64-apple-darwin
            os: macos-latest
            use_cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
            use_cross: true
          - target: aarch64-apple-darwin
            os: macos-latest
            use_cross: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
            target: ${{ matrix.target }}

      - name: Install cross for complex targets
        if: matrix.use_cross
        run: |
          cargo install cross

      - name: Install Windows cross-compilation tools
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Build release binary
        working-directory: ./client/rust
        run: |
          if [[ "${{ matrix.use_cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Package binary
        working-directory: ./client/rust
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            zip ../../../mita-${{ matrix.target }}.zip mita.exe
          else
            tar -czf ../../../mita-${{ matrix.target }}.tar.gz mita
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: mita-${{ matrix.target }}
          path: ./client/rust/mita-${{ matrix.target }}.*

  github-release:
    name: GitHub Release
    needs: [ build ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the version
        working-directory: ./client/rust
        run: |
          VER=$(grep "^version" Cargo.toml | awk '{print $3}' | tr -d '"')
          echo "VERSION=$VER" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Prepare release files
        run: |
          mkdir -p ./release-files
          find ./artifacts -name "mita-*" -exec cp {} ./release-files/ \;
          ls -la ./release-files/

      - name: Release to GitHub Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.ACCESS_TOKEN }}"
          automatic_release_tag: "client/rust/${{ env.VERSION }}"
          title: "[client-rust/${{ env.VERSION }}] Mita Rust Client Release"
          prerelease: false
          files: "./release-files/*"
          draft: true

  crates-release:
    name: Crates.io Release
    needs: [ build ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true

      - name: Release to Crates.io
        uses: katyo/publish-crates@v2
        with:
          path: './client/rust'
          registry-token: ${{ secrets.CRATES_IO_TOKEN }}
